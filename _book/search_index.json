[
["index.html", "Random notes", " Random notes A random assortment of programming notes "],
["a-comparison-of-indexing-and-subsetting-in-r-and-python.html", "A comparison of indexing and subsetting in R and Python Dataframes", " A comparison of indexing and subsetting in R and Python Dataframes In what follows we assume Python has access to a dataframe called mtcars which is constructed on the same basis as the R one. import pandas as pd mtcars = pd.read_csv(&quot;https://vincentarelbundock.github.io/Rdatasets/csv/datasets/mtcars.csv&quot;, index_col=0) Selecting rows Selecting row by numeric index R mtcars[1,] This returns a 'data.frame': 1 obs. of 11 variables Python mtcars.iloc[0,:] This returns a pandas.core.series.Series Selecting row by named index R mtcars[&#39;Mazda RX4&#39;, ] This returns a 'data.frame': 1 obs. of 11 variables Python mtcars.loc[&#39;Mazda RX4&#39;,:] This returns a pandas.core.series.Series Selecting columns Selecting column by numeric index R mtcars[,1 ] This returns a numeric vector. Python mtcars.iloc[:,0] This returns a pandas.core.series.Series Selecting individual ‘cells’ (items) Selecting item by numeric index R mtcars[1,1 ] This returns a numeric vector with a single item Python mtcars.iloc[0,0] This returns a float Selecting item by named index R mtcars[&#39;Mazda RX4&#39;,&#39;mpg&#39;] This returns a numeric atomic vector with a single item. Python mtcars.loc[&#39;Mazda RX4&#39;,&#39;mpg] This returns a float. 0.0.0.1 Obtaining the index itself Python mtcars.index mtcars.columns These are both of type pandas.indexes.base.Index R names(mtcars) rownames(mtcars) These are both atomic vectors of strings. Edge cases? Things can get ambiguous in two situations: 1) You have integer row or column names which aren’t just ascending integers starting at 0 (Python) or 1 (R). This creates an ambiguity between indexing my name or by number 2) You have an index with duplicate values. 0.0.1 Subsetting "],
["setup.html", "Setup", " Setup Here are some notes on running the code in this .Rmd. To run the code, you’ll want to remove eval=FALSE from the code blocks. In what follows we are going to use the mtcars dataset. If you want to run this code in Python, you’ll need access to the dataset. You can get this by doing: pip install ggplot and then in python from ggplot import mtcars Note that in order for the Python code to execute, you need to make sure that Sys.which('python') returns the path for Anaconda rather than Mac OS default python. See here, here and here. The solution I found was cd ~ echo .Renviron &gt;&gt; PATH=/Users/robinlinacre/anaconda/bin "]
]
